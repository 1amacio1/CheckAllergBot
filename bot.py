import pytesseract
from PIL import Image
from aiogram import Bot, Dispatcher, types
from aiogram.types import ContentType
from aiogram import executor
from config import TOKEN_API
import re

pytesseract.pytesseract.tesseract_cmd = r'C://Program Files//Tesseract-OCR//tesseract.exe'


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(TOKEN_API)
dp = Dispatcher(bot)

# –°–ø–∏—Å–æ–∫ –∞–ª–ª–µ—Ä–≥–µ–Ω–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞
ALLERGENS = [
    '–º–æ–ª–æ–∫–æ', '—è–π—Ü–æ', '—Ä—ã–±–∞', '–∞—Ä–∞—Ö–∏—Å', '—Å–æ—è', '–ø—à–µ–Ω–∏—Ü–∞', 
    '–æ—Ä–µ—Ö–∏', '–º–∏–Ω–¥–∞–ª—å', '–≥—Ä–µ—Ü–∫–∏–π –æ—Ä–µ—Ö', '—Ñ—É–Ω–¥—É–∫', '–∫–µ—à—å—é',
    '–≥–æ—Ä—á–∏—Ü–∞', '–∫—É–Ω–∂—É—Ç', '–ª—é–ø–∏–Ω', '—Å–µ—Ä–Ω–∏—Å—Ç—ã–π –∞–Ω–≥–∏–¥—Ä–∏–¥', '–∞–ø–µ–ª—å—Å–∏–Ω–æ–≤—ã–π —Å–æ–∫'
]

HELP_COMMAND = """
<b>–í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:</b>
üìç /start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞
üìç /analyse - –∞–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–∞–≤–∞
üìç /info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
üìç /help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
üìç /links - –ø–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏
"""

START_COMMAND = """
–ü—Ä–∏–≤–µ—Ç!üëã
–Ø –±–æ—Ç –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Å—Ç–∞–≤ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ –≤—ã—è–≤–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω—ã–µ –∞–ª–ª–µ—Ä–≥–µ–Ω—ã

–ù–∞–∂–º–∏ /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
"""

INFO_COMMAND = """
<b>–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –æ–±–Ω–∞—Ä—É–∂–∏—Ç—å –≤ —Å–æ—Å—Ç–∞–≤–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∞–ª–ª–µ—Ä–≥–µ–Ω—ã!ü••
–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ª–∏—à—å —Å–∫–∏–Ω—É—Ç—å –≤ —á–∞—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å–æ—Å—Ç–∞–≤–∞ –∏ –±–æ—Ç –Ω–µ–∑–∞–º–µ–¥–ª–∏—Ç–µ–ª—å–Ω–æ –≤—ã—è–≤–∏—Ç –ø—Ä–æ–¥—É–∫—Ç—ã

–ù–∞–∂–º–∏ /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥!</b>
"""

HELPFUL_LINKS = """
<b>–ó–¥–µ—Å—å –µ—Å—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∏ –ø–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:</b>
üìç https://www.kp.ru/family/eda/produkty-allergeny/ - –ø–∏—â–µ–≤—ã–µ –∞–ª–ª–µ—Ä–≥–µ–Ω—ã
üìç https://suprastin.net/encyclopedia/allergeny/ - "—ç–Ω—Ü–∏–∫–ª–æ–ø–µ–¥–∏—è" –¥–ª—è –∞–ª–ª–µ—Ä–≥–∏–∫–æ–≤
üìç https://wer.ru/articles/top-preparatov-ot-allergii-antigistaminnye/ - –∞–Ω—Ç–∏–≥–∏—Å—Ç–æ–º–∏–Ω–Ω—ã–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã
"""

async def on_startup(dp):
    await bot.set_my_commands([
        types.BotCommand('start', '–Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º'),
        types.BotCommand('help', '–¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã'),
        types.BotCommand('analyse', '–∞–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–∞–≤–∞'),
        types.BotCommand('info', '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ'),
        types.BotCommand('links', '–ø–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏')
    ])

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏ –ø–æ–∏—Å–∫–∞ –∞–ª–ª–µ—Ä–≥–µ–Ω–æ–≤
def find_allergens(image_path):
    # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
    text = pytesseract.image_to_string(Image.open(image_path), lang='rus')
    found_allergens = []
    # –ü–æ–∏—Å–∫ –∞–ª–ª–µ—Ä–≥–µ–Ω–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ
    for allergen in ALLERGENS:
        if re.search(rf'\b{allergen}\b', text, re.IGNORECASE):
            found_allergens.append(allergen)
    return found_allergens, text

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
@dp.message_handler(content_types=ContentType.PHOTO)
async def handle_photo(message: types.Message):
    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
    photo = message.photo[-1]  # –ë–µ—Ä–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å–∞–º–æ–º –≤—ã—Å–æ–∫–æ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏
    file_path = await photo.download(destination_file='photo.png')

    # –ò—â–µ–º –∞–ª–ª–µ—Ä–≥–µ–Ω—ã –Ω–∞ —Ñ–æ—Ç–æ
    allergens, recognized_text = find_allergens('photo.png')

    if allergens:
        allergen_list = ', '.join(allergens)
        await message.reply(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –≤–æ–∑–º–æ–∂–Ω—ã–µ –∞–ª–ª–µ—Ä–≥–µ–Ω—ã: {allergen_list}\n\n–ù–∞–∂–º–∏—Ç–µ /help, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏ –≤ –º–µ–Ω—é!")
    else:
        await message.reply("–ê–ª–ª–µ—Ä–≥–µ–Ω—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã.\n\n–ù–∞–∂–º–∏—Ç–µ /help, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏ –≤ –º–µ–Ω—é!")
    
    # –î–ª—è —Å–ø—Ä–∞–≤–∫–∏: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    # await message.reply(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n{recognized_text}")

@dp.message_handler(commands=["start"])
async def send_welcome(message: types.Message):
    await bot.send_message(text=START_COMMAND, chat_id=message.from_user.id, parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler(commands=["help"])
async def help_user(message: types.Message):
    await bot.send_message(text=HELP_COMMAND, chat_id=message.from_user.id, parse_mode="HTML")

@dp.message_handler(commands=["info"])
async def inf_command(message: types.Message):
    await bot.send_message(text=INFO_COMMAND, chat_id=message.from_user.id, parse_mode="HTML")

@dp.message_handler(commands=["analyse"])
async def analyse_photo(message: types.Message):
    await bot.send_message(text="–ü—Ä–∏—à–ª–∏ –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å–æ—Å—Ç–∞–≤–∞ –∏ —è –Ω–∞–π–¥—É –ø—Ä–æ–¥—É–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –º–æ–≥—É—Ç –≤—ã–∑–≤–∞—Ç—å –∞–ª–ª–µ—Ä–≥–∏—é..", chat_id=message.from_user.id)
    
@dp.message_handler(commands=["links"])
async def links_command(message: types.Message):
    await bot.send_message(text=HELPFUL_LINKS, chat_id=message.from_user.id, disable_web_page_preview=True, parse_mode="HTML")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)